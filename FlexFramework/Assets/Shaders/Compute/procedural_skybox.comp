#version 430
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

const float PI = 3.1415926535897932384626433832795;

layout(location = 0) uniform mat4 inverseProjection;
layout(location = 1) uniform mat4 inverseView;
layout(location = 2) uniform vec3 lightDir;
layout(location = 3) uniform vec3 lightColor;

layout(rgba16f, binding = 0) uniform image2D outputImage;

vec3 getCamDirection(vec2 uv) {
    vec4 pos = vec4(uv, 0.0, 1.0) * inverseProjection;
    return normalize(pos.xyz * mat3(inverseView));
}

void main() {
    ivec2 size = imageSize(outputImage);
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
    vec2 pixelSize = 1.0 / vec2(size);
    vec2 texCoord = pixelCoord / vec2(size) + pixelSize * 0.5;

    vec3 direction = getCamDirection(texCoord * vec2(2.0) - vec2(1.0));
    
    // interpolate from sky blue to black along the y axis with horizon at 0
    float blend = 0.5 * (direction.y + 1.0);
    blend = pow(blend, 1.0f / 3.0f); // cube root
    vec3 color = mix(vec3(0.0, 0.0, 0.0), vec3(0.5, 0.7, 1.0), blend);
    
    // add small sun
    float sun = max(dot(direction, -lightDir), 0.0);
    sun = smoothstep(0.999, 0.99925, sun);
    color = mix(color, lightColor * 5.0, sun);
    
    imageStore(outputImage, pixelCoord, vec4(color, 1.0));
}