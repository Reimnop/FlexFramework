#version 430
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

const float PI = 3.1415926535897932384626433832795;

layout(location = 0) uniform sampler2D inputTexture;
layout(location = 1) uniform mat4 inverseProjection;
layout(location = 2) uniform mat4 inverseView;

layout(rgba16f, binding = 0) uniform image2D outputImage;

vec3 getCamDirection(vec2 uv) {
    vec4 pos = vec4(uv, 0.0, 1.0) * inverseProjection;
    return normalize(pos.xyz * mat3(inverseView));
}

vec4 samplePanorama(vec3 direction) {
    float theta = acos(direction.y) / PI;
    float phi = atan(direction.x, -direction.z) / -PI * 0.5;
    vec2 uv = vec2(phi, theta);
    return texture(inputTexture, uv);
}

void main() {
    ivec2 size = imageSize(outputImage);
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
    vec2 pixelSize = 1.0 / vec2(size);
    vec2 texCoord = pixelCoord / vec2(size) + pixelSize * 0.5;

    vec3 direction = getCamDirection(texCoord * vec2(2.0) - vec2(1.0));
    vec4 color = samplePanorama(direction);
    imageStore(outputImage, pixelCoord, color);
}