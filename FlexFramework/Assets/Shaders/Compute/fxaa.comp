#version 430
layout(local_size_x = 8, local_size_y = 8) in;

uniform float lumaThreshold = 0.5;
uniform float mulReduce = 1.0 / 8.0;
uniform float minReduce = 1.0 / 128.0;
uniform float maxSpan = 8.0;

uniform sampler2D inputTexture;
layout(rgba16f, binding = 0) uniform image2D outputImage;

// Stolen from https://github.com/McNopper/OpenGL/blob/master/Example42/shader/fxaa.frag.glsl
vec3 fxaa(sampler2D colorTexture, vec2 fragCoord, vec2 pixelSize, vec3 rgbM) {
    // I literally never knew textureOffset was a thing
    vec3 rgbNW = textureOffset(colorTexture, fragCoord, ivec2(-1,  1)).rgb;
    vec3 rgbNE = textureOffset(colorTexture, fragCoord, ivec2( 1,  1)).rgb;
    vec3 rgbSW = textureOffset(colorTexture, fragCoord, ivec2(-1, -1)).rgb;
    vec3 rgbSE = textureOffset(colorTexture, fragCoord, ivec2( 1, -1)).rgb;

    // see http://en.wikipedia.org/wiki/Grayscale
    const vec3 toLuma = vec3(0.299, 0.587, 0.114);

    // Convert from RGB to luma.
    float lumaNW = dot(rgbNW, toLuma);
    float lumaNE = dot(rgbNE, toLuma);
    float lumaSW = dot(rgbSW, toLuma);
    float lumaSE = dot(rgbSE, toLuma);
    float lumaM = dot(rgbM, toLuma);

    // Gather minimum and maximum luma.
    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));
    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));

    // If contrast is lower than a maximum threshold ...
    if (lumaMax - lumaMin <= lumaMax * lumaThreshold)
    {
        // ... do no AA and return.
        return rgbM;
    }

    // Sampling is done along the gradient.
    vec2 samplingDirection;
    samplingDirection.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));
    samplingDirection.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));

    // Sampling step distance depends on the luma: The brighter the sampled texels, the smaller the final sampling step direction.
    // This results, that brighter areas are less blurred/more sharper than dark areas.  
    float samplingDirectionReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) * 0.25 * mulReduce, minReduce);

    // Factor for norming the sampling direction plus adding the brightness influence. 
    float minSamplingDirectionFactor = 1.0 / (min(abs(samplingDirection.x), abs(samplingDirection.y)) + samplingDirectionReduce);

    // Calculate final sampling direction vector by reducing, clamping to a range and finally adapting to the texture size. 
    samplingDirection = clamp(samplingDirection * minSamplingDirectionFactor, vec2(-maxSpan), vec2(maxSpan)) * pixelSize;

    // Inner samples on the tab.
    vec3 rgbSampleNeg = texture(colorTexture, fragCoord + samplingDirection * (1.0 / 3.0 - 0.5)).rgb;
    vec3 rgbSamplePos = texture(colorTexture, fragCoord + samplingDirection * (2.0 / 3.0 - 0.5)).rgb;

    vec3 rgbTwoTab = (rgbSamplePos + rgbSampleNeg) * 0.5;

    // Outer samples on the tab.
    vec3 rgbSampleNegOuter = texture(colorTexture, fragCoord + samplingDirection * (0.0 / 3.0 - 0.5)).rgb;
    vec3 rgbSamplePosOuter = texture(colorTexture, fragCoord + samplingDirection * (3.0 / 3.0 - 0.5)).rgb;

    vec3 rgbFourTab = (rgbSamplePosOuter + rgbSampleNegOuter) * 0.25 + rgbTwoTab * 0.5;

    // Calculate luma for checking against the minimum and maximum value.
    float lumaFourTab = dot(rgbFourTab, toLuma);

    // Are outer samples of the tab beyond the edge ... 
    if (lumaFourTab < lumaMin || lumaFourTab > lumaMax)
    {
        // ... yes, so use only two samples.
        return rgbTwoTab;
    }
    else
    {
        // ... no, so use four samples. 
        return rgbFourTab;
    }
}

void main() {
    ivec2 size = imageSize(outputImage);
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
    vec2 pixelSize = 1.0 / vec2(size);
    vec2 texCoord = pixelCoord / vec2(size) + pixelSize * 0.5;
    vec3 rgbM = texture(inputTexture, texCoord).rgb;
    vec3 rgbA = fxaa(inputTexture, texCoord, pixelSize, rgbM);
    imageStore(outputImage, pixelCoord, vec4(rgbA, 1.0));
}